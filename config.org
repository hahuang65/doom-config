* Personal Information

These variables are using for identification in things like GPG, email, file templates and snippets:

#+begin_src elisp
(setq user-full-name "Howard Huang"
      user-mail-address "h.huang65@gmail.com")
#+end_src

* Fonts

#+begin_src elisp
(setq doom-font (font-spec :family "JetBrains Mono" :size 14)
      doom-variable-pitch-font (font-spec :family "JetBrains Mono" :size 14)
      doom-big-font (font-spec :family "JetBrains Mono" :size 24))
#+end_src

Setup ligatures for JetBrains Mono

#+begin_src elisp
(defconst jetbrains-ligature-mode--ligatures
   '("-->" "//" "/**" "/*" "*/" "<!--" ":=" "->>" "<<-" "->" "<-"
     "<=>" "==" "!=" "<=" ">=" "=:=" "!==" "&&" "||" "..." ".."
     "|||" "///" "&&&" "===" "++" "--" "=>" "|>" "<|" "||>" "<||"
     "|||>" "<|||" ">>" "<<" "::=" "|]" "[|" "{|" "|}"
     "[<" ">]" ":?>" ":?" "/=" "[||]" "!!" "?:" "?." "::"
     "+++" "??" "###" "##" ":::" "####" ".?" "?=" "=!=" "<|>"
     "<:" ":<" ":>" ">:" "<>" "***" ";;" "/==" ".=" ".-" "__"
     "=/=" "<-<" "<<<" ">>>" "<=<" "<<=" "<==" "<==>" "==>" "=>>"
     ">=>" ">>=" ">>-" ">-" "<~>" "-<" "-<<" "=<<" "---" "<-|"
     "<=|" "/\\" "\\/" "|=>" "|~>" "<~~" "<~" "~~" "~~>" "~>"
     "<$>" "<$" "$>" "<+>" "<+" "+>" "<*>" "<*" "*>" "</>" "</" "/>"
     "<->" "..<" "~=" "~-" "-~" "~@" "^=" "-|" "_|_" "|-" "||-"
     "|=" "||=" "#{" "#[" "]#" "#(" "#?" "#_" "#_(" "#:" "#!" "#="
     "&="))

(dolist (pat jetbrains-ligature-mode--ligatures)
  (set-char-table-range composition-function-table
                      (aref pat 0)
                      (nconc (char-table-range composition-function-table (aref pat 0))
                             (list (vector (regexp-quote pat)
                                           0
                                    'compose-gstring-for-graphic)))))
#+end_src

* Theme

A list of available themes provided by Doom can be found in the [[https://github.com/hlissner/emacs-doom-themes/tree/master/themes][Doom Themes]] repository.
In order to use a theme not provided by Doom, use the ~load-theme~ function.

#+begin_src elisp
(setq doom-theme 'doom-dracula)
#+end_src

** Terminal Mode

NOTE: In order for themes to work properly in terminal mode, you must set ~:os tty~ to ~t~ in [[file:init.el][init.el]], as well as [[https://github.com/hlissner/doom-emacs/blob/develop/modules/os/tty/README.org#true-color-and-italic-support][enable true color]].
For backgrounds to be properly colored in terminal mode set this property, and [[https://doomemacs.discourse.group/t/different-background-color-between-emacsclient-nw-and-emacs-nw/160][disable solaire mode]] in [[file:packages.el][packages.el]]:

#+begin_src elisp
;; (custom-set-faces!
;;   '(default :background nil))
#+end_src

* Org Mode

#+begin_src elisp
(setq org-directory "~/.org/") ;; Set the default directory for org files. Must be set before org loads
(setq org-journal-dir "~/.org/journal") ;; Set the default directory for journal files
(setq org-hide-leading-stars t) ;; Hide extra stars in front of headers
(setq org-hide-emphasis-markers t) ;; Hide extra font markers, like ~ or * around text
(setq org-startup-with-inline-images t) ;; Enable inline images by default
#+end_src

** Agenda

Add journal files to the agenda

#+begin_src elisp
(after! org
  (setq org-agenda-file-regexp "\\`\\\([^.].*\\.org\\\|[0-9]\\\{8\\\}\\\(\\.gpg\\\)?\\\)\\'")
  (setq org-agenda-files (list org-directory org-journal-dir))
  (setq org-log-done 'time)) ;; Mark the timestamp when a task is marked done
#+end_src

Set a custom set of statuses for tasks

#+begin_src elisp
(after! org
  (setq org-todo-keywords
    '((sequence "TODO(t)" "INPROGRESS(i)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)" "MIGRATED(m)"))))
#+end_src

Change some agenda display options

#+begin_src elisp
(after! org
  (setq org-agenda-skip-deadline-if-done t ;; If a task is done, don't show a duplicate deadline entry
        org-agenda-skip-deadline-prewarning-if-scheduled t ;; Don't show warnings of deadlines before the deadline date. It just causes duplicate entries in the agenda
        org-agenda-skip-scheduled-if-deadline-is-shown t ;; Don't show the scheduled entry if the deadline entry is shown.
        org-agenda-tags-column '-1)) ;; Show tags immediately after the task
#+end_src

** Custom Links

Creates a custom link for linking to Summit Partners' Jira board

#+begin_src elisp
(defun make-jira-link (ticket_id)
  (browse-url (concat "https://alpha5sp.atlassian.net/browse/A5-" ticket_id)))

(after! org
  (org-add-link-type "jira" #'make-jira-link))
#+end_src

** Journal

#+begin_src elisp
(setq org-journal-date-prefix "") ;; Disable having the date as a header in journals
(setq org-journal-time-prefix "") ;; Disable having the time as a header in journals
(setq org-journal-time-format "") ;; Disable having the time in journals
(after! org-journal
    (setq org-journal-carryover-items "")) ;; Disable carryover feature. It doesn't work as expected, will need more tweaking.

(defun insert-journal-template (&rest ignore)
  (insert (concat "\n"
                  "* Gratitude"
                  "\n"
                  "\n"
                  "* Looking Forward To"
                  "\n"
                  "\n"
                  "* Reading List"
                  "\n"
                  "\n"
                  "* Schedule"
                  "\n"
                  )))

(add-hook 'org-journal-after-entry-create-hook #'insert-journal-template)
#+end_src

** Keybinds

Use ~C-v~ to paste in insert mode

#+begin_src elisp
(map! :i "C-v" #'evil-paste-after)
#+end_src

Use backspace to go to the previous org page

#+begin_src elisp
(map! :after evil-org
      :map evil-org-mode-map
      :n "DEL" #'org-mark-ring-goto)
#+end_src

Open today's journal file with ~SPC o j~

#+begin_src elisp
(map! :after evil-org
      :map evil-org-mode-map
      :leader
      :desc "Open today's journal page" "o j" #'org-journal-open-current-journal-file)
#+end_src

File finder in the journal directory with ~SPC f j~

#+begin_src elisp
(map! :after evil-org
      :map evil-org-mode-map
      :leader
      :desc "Open journal page finder" "f j" (cmd! (let ((default-directory org-journal-dir))
                                                   (call-interactively #'find-file))))
#+end_src

Open ~Main.org~ with ~SPC o m~

#+begin_src elisp
(map! :leader
      :desc "Open Main.org" "o m" (cmd! (find-file (concat org-directory "Main.org"))))
#+end_src

File finder in the org-mode directory with ~SPC f o~

#+begin_src elisp
(map! :after evil-org
      :map evil-org-mode-map
      :leader
      :desc "Open journal page finder" "f o" (cmd! (let ((default-directory org-directory))
                                                   (call-interactively #'find-file))))
#+end_src

Use ~SPC a s~ to schedule a TODO

#+begin_src elisp
(map! :after evil-org
      :map evil-org-mode-map
      :leader
      :desc "Schedule a TODO" "a s" #'org-schedule)
#+end_src

Use ~SPC a d~ to set a deadline for a TODO

#+begin_src elisp
(map! :after evil-org
      :map evil-org-mode-map
      :leader
      :desc "Deadline a TODO" "a d" #'org-deadline)
#+end_src

Use ~SPC a a~ to open the agenda

#+begin_src elisp
(map! :after evil-org
      :map evil-org-mode-map
      :leader
      :desc "Open agenda" "a a" #'org-agenda-list)
#+end_src

Use ~SPC a t~ to open the TODO list

#+begin_src elisp
(map! :after evil-org
      :map evil-org-mode-map
      :leader
      :desc "Open TODO list" "a t" #'org-todo-list)
#+end_src

Use ~SPC a p~ to set priorities

#+begin_src elisp
(map! :after evil-org
      :map evil-org-mode-map
      :leader
      :desc "Set TODO priority" "a p" #'org-priority)
#+end_src

* Editor Settings

#+begin_src elisp
(setq display-line-numbers-type 'relative) ;; Set to `nil' to disable, `relative' for relative numbers
(after! evil-snipe (evil-snipe-mode -1)) ;; Disable evil-snipe mode to restore default evil-substitute behavior

;; Make vertical splits open on the right and horizontal splits open below
(setq evil-vsplit-window-right t
      evil-split-window-below t)

(setq +ivy-buffer-preview t) ;; Enable file previews for buffer switching (`+ivy/switch-buffer' only)

(setq global-evil-surround-mode 1) ;; Enable evil-surround everywhere
#+end_src

Open ~~/.doom.d/config.org~ with ~SPC o c~

#+begin_src elisp
(map! :leader
      :desc "Open config.org" "o c" (cmd! (find-file (concat doom-private-dir "config.org"))))
#+end_src

* Modeline

#+begin_src elisp
(setq doom-modeline-unicode-fallback t) ;; Enables unicode icons in terminal mode if terminal font doesn't support icons
(setq doom-modeline-vcs-max-length 24) ;; Makes the git branch section bigger, allows for longer branch names
#+end_src

Since ~LF UTF-8~ is the default encoding, only show encoding in the modeline if it's different

#+begin_src elisp
(defun doom-modeline-conditional-buffer-encoding ()
  (setq-local doom-modeline-buffer-encoding
              (unless (or (eq buffer-file-coding-system 'utf-8-unix)
                          (eq buffer-file-coding-system 'utf-8)))))

(add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)
#+end_src

* Projectile

#+begin_src elisp
(setq projectile-project-search-path '("~/Documents/Projects/a5/"))
(setq projectile-files-cache-expire 10) ;; Expire project cache fairly frequently
#+end_src

Ignore certain projects

#+begin_src elisp
;; Ignore projects for projectile
(setq projectile-ignored-projects '("~/.emacs.d/" "~/.emacs.d/.local/straight/repos/"))
(defun projectile-ignored-project-function (filepath)
  "Return t if FILEPATH is within any of `projectile-ignored-projects'"
  (or (mapcar (lambda (p) (s-starts-with-p p filepath)) projectile-ignored-projects)))
#+end_src

* LSP

#+begin_src elisp
(setq flycheck-checker-error-threshold nil) ;; Disable maximum number of errors before flycheck disables itself
#+end_src

* Splits

Keybinds for moving between splits without ~C-w~
Disabling for now, for parity with Vim

#+begin_src elisp
;; (map! :map override
;;       :n "C-h" #'evil-window-left
;;       :n "C-j" #'evil-window-down
;;       :n "C-k" #'evil-window-up
;;       :n "C-l" #'evil-window-right)
#+end_src

#+begin_src elisp
;; (map! :after evil-org-agenda
;;       :map evil-org-agenda-mode-map
;;       :m "C-h" #'evil-window-left
;;       :m "C-j" #'evil-window-down
;;       :m "C-k" #'evil-window-up
;;       :m "C-l" #'evil-window-right)
#+end_src

Ability to open splits from Ivy/Counsel
Use ~C-s~ to open a horizontal split, and ~C-v~ to open a vertical split

#+begin_src elisp
(defun find-after-split (split-fn open-fn)
  (interactive)
  (call-interactively split-fn)
  (other-window 1)
  (call-interactively open-fn))

(defun open-split (direction location)
  (let* ((which
          (pcase (ivy-state-caller ivy-last)
            ('counsel-rg 'grep)
            ('counsel-projectile-find-file 'project)
            ('ivy-switch-buffer 'buffer)
            (_ 'default)))
         (split-fn
          (pcase direction
                ('below #'split-window-below)
                ('right #'split-window-right)))
         (find-fn
          (pcase which
                ('buffer (cmd! (switch-to-buffer location)))
                ('project (cmd! (find-file (projectile-expand-root location))))
                ('grep (cmd! (counsel-git-grep-action location)))
                ('default (cmd! (funcall (ivy-state-action ivy-last) location))))))
    (find-after-split split-fn find-fn)))

(map!
 :after ivy
 :map ivy-minibuffer-map
   "C-s" (cmd! (ivy-exit-with-action (apply-partially #'open-split 'below)))
   "C-v" (cmd! (ivy-exit-with-action (apply-partially #'open-split 'right)))
 :map ivy-switch-buffer-map
   "C-s" (cmd! (ivy-exit-with-action (apply-partially #'open-split 'below)))
   "C-v" (cmd! (ivy-exit-with-action (apply-partially #'open-split 'right)))
 )
#+end_src

* Default config from Doom Emacs

Below is the default configuration from Doom Emacs. All lines are commented out so it doesn't get evaluated, be careful when /un-commenting/ anything.

#+begin_src elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
;; (setq user-full-name "John Doe"
;;       user-mail-address "john@doe.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-one)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
;; (setq org-directory "~/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
;; (setq display-line-numbers-type t)


;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src
